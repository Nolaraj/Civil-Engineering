import win32com.client
import pythoncom
from time import sleep
import pyautocad


acad = win32com.client.dynamic.Dispatch("AutoCAD.Application")
doc = acad.ActiveDocument
mSc = doc.ModelSpace
acad.Visible = 1
""" Passing and Obtaining Python Objects from COM>>> The functions below must be used before passing to ACTIVE X Command.
            ie Active X only understands the values below only"""


def vtpt(x, y, z=0):
    return win32com.client.VARIANT(pythoncom.VT_ARRAY | pythoncom.VT_R8, (x, y, z))
    """Converts to COM recognized type Float"""
def vtobj(obj):
    return win32com.client.VARIANT(pythoncom.VT_ARRAY | pythoncom.VT_DISPATCH, obj)
    """Converts to COM recognized type Dispatch Object(Object of Application)"""
def vtFloat(lis):
    """ list converted to floating points"""
    return win32com.client.VARIANT(pythoncom.VT_ARRAY | pythoncom.VT_R8, lis)
def vtint(val):
    return win32com.client.VARIANT(pythoncom.VT_ARRAY | pythoncom.VT_I2, val)
    """Converts to COM recognized type Integer"""
def vtvariant(var):
    return win32com.client.VARIANT(pythoncom.VT_ARRAY | pythoncom.VT_VARIANT, var)
    """Converts to COM recognized type Variant(that lies under application object(Like:Circle, Line...))"""
# Convert pt to vtpt
def pt_vtpt(pt):
    if len(pt) == 2:
        return vtpt(pt[0], pt[1])
    else:
        return vtpt(pt[0], pt[1], pt[2])
# Polar function by giving point, angle, distance & Return 3D point(z=0)
def polar(p, a, d):
    x = p[0] + d * math.cos(a)
    y = p[1] + d * math.sin(a)
    return [x, y, 0.0]
# Distance function by giving 2D point1, point2
def distance(p, q):
    dx = p[0] - q[0]
    dy = p[1] - q[1]
    return math.sqrt(math.pow(dx, 2) + math.pow(dy, 2))
# Angle function by giving 2D point1, point2
def angle(p, q):
    dx = q[0] - p[0]
    dy = q[1] - p[1]
    return math.atan2(dy, dx)
# Compute boundary of giving Line entity & buffer
def line_bounds(e, b):
    al = e.Angle + pi * 0.5
    ar = e.Angle - pi * 0.5
    p1 = e.StartPoint
    p2 = e.EndPoint
    p11 = polar(p1, al, b)
    p12 = polar(p1, ar, b)
    p21 = polar(p2, al, b)
    p22 = polar(p2, ar, b)
    return [p11, p12, p22, p21, p11]
# Checking layer exist or not
def layerexist(lay):
    layers = doc.Layers
    print(type(layers))
    layers_nums = layers.Count
    layers_names = [layers.Item(i).Name for i in range(layers_nums)]  # List of ACAD layers
    if lay in layers_names:
        return True;
    else:
        return False;
#Creation of Selection Set Object




"""Selection of Objects by Polygon Method. Refer Hardcopy note for more"""

try:    doc.SelectionSets.Item("SS1").Delete()
except:    print("Delete selection failed")

slt = doc.SelectionSets.Add("SS1")
pnts = [-50, -50, 0, -50, 550, 0, 550, 550, 0, 550, -50, 0, -50, -50, 0]
pnts=   vtFloat(pnts)
print(pnts)
slt.SelectByPolygon(6, pnts) # acSelectionSetWindowPolygon = 6




"""Creation of Group and Adding objects to it"""
#Creation of Group and adding members to it
new = doc.Groups.Add("New_group")

# pan = pyautocad.iter_objects(slt)

print(mSc.Count)
print(slt.Item)
items_all = [i for i in slt]
print(items_all)
new.AppendItems(vtobj(items_all))



